// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for NextAuth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enums
enum SubscriptionPlan {
  Beginner
  Investor
  Trader
}

enum SubscriptionStates {
  Active
  Canceled
  Expired
}

enum TradeType {
  Buy
  Sell
}

enum AssetCategory {
  Stock
  ETF
  Crypto
}

enum ArticleCategory {
  Technology
  Healthcare
  Financials
  ConsumerGoods
  Utilities
  Energy
  RealEstate
  Industrials
  Materials
  Telecommunications
  ConsumerServices
}

enum AttachmentTypes {
  Image
  Video
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique @db.VarChar(255)
  firstName       String   @db.VarChar(50)
  middleName      String?  @db.VarChar(50)
  lastName        String   @db.VarChar(50)
  aiCredits       Int      @default(0)
  balance         Decimal  @default(0.00) @db.Decimal(10, 2)
  tag             String   @unique @db.VarChar(50)
  profileImage    String?  @db.VarChar(255)
  dateOfBirth     DateTime?
  verified        Boolean  @default(false)
  customerId      String?  @db.VarChar(255)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  accounts        Account[]
  sessions        Session[]

  chats1          Chat[]   @relation("ChatUser1")
  chats2          Chat[]   @relation("ChatUser2")
  messages        Message[]
  subscriptions   Subscription[]
  trades          Trade[]
  deposits        Deposit[]
  withdrawals     Withdrawal[]
  referralCodes   ReferralCode[]
  referralUses    ReferralUse[]
  posts           Post[]
  comments        Comment[]
  followers       Follow[] @relation("follower")
  following       Follow[] @relation("following")
  likes           Like[]
  articleRatings  ArticleRating[]
  aiChats         AiChat[]
}


// messaging
model Chat {
  id        Int      @id @default(autoincrement())
  user1     User     @relation("ChatUser1", fields: [user1Id], references: [id])
  user1Id   String
  user2     User     @relation("ChatUser2", fields: [user2Id], references: [id])
  user2Id   String
  createdAt DateTime @default(now())
  messages  Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  attachments MessageAttachment[]
}

model MessageAttachment {
  id        Int      @id @default(autoincrement())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId Int
  filePath  String   @db.VarChar(255)
  fileType  AttachmentTypes
  createdAt DateTime @default(now())
}

// subscription
model Subscription {
  id        String           @id @default(uuid())
  plan      SubscriptionPlan
  status    SubscriptionStates
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}


// trades and assets
model Trade {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  asset      Asset    @relation(fields: [assetId], references: [id])
  assetId    Int
  type       TradeType
  amount     Decimal  @db.Decimal(10, 2)
  price      Decimal  @db.Decimal(10, 2)
  stopLoss   Decimal? @db.Decimal(10, 2)
  takeProfit Decimal? @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  closedAt   DateTime?
}

model Asset {
  id        Int           @id @default(autoincrement())
  name      String        @db.VarChar(100)
  symbol    String        @db.VarChar(10)
  category  AssetCategory
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  trades    Trade[]
  prices    AssetPrice[]
}

model AssetPrice {
  id         Int      @id @default(autoincrement())
  asset      Asset    @relation(fields: [assetId], references: [id])
  assetId    Int
  value      Decimal  @db.Decimal(10, 2)
  recordedAt DateTime @default(now())
}


// money movements
model Deposit {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
}

model Withdrawal {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
}


// referral code
model ReferralCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(50)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  uses      ReferralUse[]
}

model ReferralUse {
  id              Int           @id @default(autoincrement())
  referralCode    ReferralCode  @relation(fields: [referralCodeId], references: [id])
  referralCodeId  Int
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime      @default(now())
}

// posts
model Post {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  content     String       @db.Text
  createdAt   DateTime     @default(now())
  comments    Comment[]
  likes       Like[]
  attachments PostAttachment[]
}

model Comment {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  post            Post      @relation(fields: [postId], references: [id])
  postId          Int
  replyCommentId  Int?
  replyComment    Comment?  @relation("Reply", fields: [replyCommentId], references: [id])
  comments        Comment[] @relation("Reply")
  content         String    @db.Text
  createdAt       DateTime  @default(now())
}

model Follow {
  follower   User @relation("follower", fields: [followerId], references: [id])
  followerId String
  followed   User @relation("following", fields: [followedId], references: [id])
  followedId String
  createdAt  DateTime @default(now())

  @@id([followerId, followedId])
}

model Like {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@id([userId, postId])
}

model PostAttachment {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  filePath  String   @db.VarChar(255)
  fileType  String
  createdAt DateTime @default(now())
}


// articles
model Article {
  id           Int              @id @default(autoincrement())
  title        String            @db.VarChar(255)
  category     ArticleCategory
  readTime     Int
  premium      Boolean           @default(false)
  thumbnailUrl String?           @db.VarChar(255)
  redactor     Redactor          @relation(fields: [redactorId], references: [id])
  redactorId   Int
  createdAt    DateTime          @default(now())
  ratings      ArticleRating[]
}

model ArticleRating {
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  rating    Int

  @@id([articleId, userId])
}

model Redactor {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  firstName String   @db.VarChar(50)
  lastName  String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articles  Article[]
}

// ai
model AiChat {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String?  @db.VarChar(64)
  createdAt DateTime @default(now())
  requests  AiRequest[]
}

model AiRequest {
  id        Int      @id @default(autoincrement())
  chat      AiChat   @relation(fields: [chatId], references: [id])
  chatId    Int
  content   String   @db.Text
  cost      Int
  createdAt DateTime @default(now())
  responses AiResponse[]
}

model AiResponse {
  id        Int      @id @default(autoincrement())
  request   AiRequest @relation(fields: [requestId], references: [id])
  requestId Int
  content   String    @db.Text
  createdAt DateTime @default(now())
}

