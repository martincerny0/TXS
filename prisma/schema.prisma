generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum SubscriptionPlanName {
  Beginner
  Investor
  Trader
}

enum SubscriptionStates {
  Active
  Canceled
  Expired
}

enum TradeType {
  Buy
  Sell
}

enum AssetCategory {
  Stock
  ETF
  Crypto
}

enum InsightsCategory {
  Tech
  Health
  Goods
  Crypto
  Economy
  Utilities
  Energy
  RealEstate
  Industry
  Services
  Markets
}
enum InsightsTag {
  New
  Trending
  Premium
  Hot
  Important
}

enum AttachmentTypes {
  Image
  Video
}

enum InvestingReason {
  Saving_for_retirement
  Building_wealth
  Generating_income
  Other
}

enum InvestingExperience {
  beginner
  intermediate
  expert
}

// Models
model User {
  id                   Int             @id @default(autoincrement())
  email                String          @unique @db.VarChar(255)
  country_code    String   @db.Char(2)
  phone_prefix    String   @db.VarChar(10)
  phone_number    String   @db.VarChar(20)
  firstName       String   @db.VarChar(50)
  lastName        String   @db.VarChar(50)
  aiCredits            Int             @default(0)
  balance              Decimal         @default(0.00) @db.Decimal(10, 2)
  tag                  String          @unique @db.VarChar(50)
  profileImage         String?         @db.VarChar(255)
  dateOfBirth          DateTime?
  emailVerified        DateTime?
  investingReason      InvestingReason?
  investingExperience  InvestingExperience?
  customerId           String?         @db.VarChar(255)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  accounts             Account[]
  sessions             Session[]
  chats1               Chat[]          @relation("ChatUser1")
  chats2               Chat[]          @relation("ChatUser2")
  messages             Message[]
  subscriptions        Subscription[]
  trades               Trade[]
  deposits             Deposit[]
  withdrawals          Withdrawal[]
  referralCodes        ReferralCode[]
  referralUses         ReferralUse[]
  posts                Post[]
  comments             Comment[]
  followers            Follow[]        @relation("follower")
  following            Follow[]        @relation("following")
  likes                Like[]
  articleRatings       InsightRating[]
  aiChats              AiChat[]
  charts               Chart[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id        String           @id @default(uuid())
  plan      SubscriptionPlan @relation(fields: [planId], references: [id])
  planId    Int
  status    SubscriptionStates
  user      User             @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model SubscriptionPlan {
  id                  Int      @id @default(autoincrement())
  name                SubscriptionPlanName
  price               Int
  smallestTimeframe   Int
  maxOpenCharts       Int
  premiumInsights     Boolean
  aiAssistantRequests Int
  portfolioAnalytics  Boolean
  updatedAt           DateTime @updatedAt
  subscriptions       Subscription[]
}

model Trade {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  asset      Asset    @relation(fields: [assetId], references: [id])
  assetId    Int
  type       TradeType
  amount     Decimal  @db.Decimal(10, 2)
  price      Decimal  @db.Decimal(10, 2)
  stopLoss   Decimal? @db.Decimal(10, 2)
  takeProfit Decimal? @db.Decimal(10, 2)
  isActive     Boolean  @default(true)
  createdAt  DateTime @default(now())
  closedAt   DateTime?
}

model Asset {
  id        Int           @id @default(autoincrement())
  name      String        @db.VarChar(100)
  symbol    String        @db.VarChar(10)
  category  AssetCategory
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  trades    Trade[]
  prices    AssetPrice[]
}

model AssetPrice {
  id         Int      @id @default(autoincrement())
  asset      Asset    @relation(fields: [assetId], references: [id])
  assetId    Int
  value      Decimal  @db.Decimal(10, 2)
  recordedAt DateTime @default(now())
}

model Deposit {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
}

model Withdrawal {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
}

model ReferralCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(50)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  uses      ReferralUse[]
}

model ReferralUse {
  id              Int           @id @default(autoincrement())
  referralCode    ReferralCode  @relation(fields: [referralCodeId], references: [id])
  referralCodeId  Int
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  createdAt       DateTime      @default(now())
}

model Post {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  content     String       @db.Text
  createdAt   DateTime     @default(now())
  comments    Comment[]
  likes       Like[]
  attachments PostAttachment[]
}

model Comment {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [userId], references: [id])
  userId          Int
  post            Post      @relation(fields: [postId], references: [id])
  postId          Int
  replyCommentId  Int?
  replyComment    Comment?  @relation("Reply", fields: [replyCommentId], references: [id])
  comments        Comment[] @relation("Reply")
  content         String    @db.Text
  createdAt       DateTime  @default(now())
}

model Follow {
  follower   User @relation("follower", fields: [followerId], references: [id])
  followerId Int
  followed   User @relation("following", fields: [followedId], references: [id])
  followedId Int
  createdAt  DateTime @default(now())

  @@id([followerId, followedId])
}

model Like {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@id([userId, postId])
}

model PostAttachment {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  filePath  String   @db.VarChar(255)
  fileType  AttachmentTypes
  createdAt DateTime @default(now())
}

model Insight {
  id           Int              @id @default(autoincrement())
  title        String           @db.VarChar(255)
  content      String           @db.Text
  description  String           @db.VarChar(64)
  category     InsightsCategory
  tag         InsightsTag
  readTime     Int
  isPremium      Boolean          @default(false)
  redactor     Redactor         @relation(fields: [redactorId], references: [id])
  redactorId   Int
  createdAt    DateTime         @default(now())
  ratings      InsightRating[]
}

model InsightRating {
  insight   Insight @relation(fields: [insightId], references: [id])
  insightId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  rating    Int

  @@id([insightId, userId])
}

model Redactor {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  firstName String   @db.VarChar(50)
  lastName  String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  insights  Insight[]
}

model AiChat {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  title     String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  requests  AiRequest[]
}

model AiRequest {
  id        Int      @id @default(autoincrement())
  chat      AiChat   @relation(fields: [chatId], references: [id])
  chatId    Int
  content   String   @db.Text
  cost      Int      @default(0)
  createdAt DateTime @default(now())
  responses AiResponse[]
}

model AiResponse {
  id        Int      @id @default(autoincrement())
  request   AiRequest @relation(fields: [requestId], references: [id])
  requestId Int
  content   String    @db.Text
  createdAt DateTime @default(now())
}

model Chart {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  indicators        Json
  paintings         Json
  trendlines        Json
  texts             Json
  selectedTimeframe String   @db.VarChar(50)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Chat {
  id        Int      @id @default(autoincrement())
  user1     User     @relation("ChatUser1", fields: [user1Id], references: [id])
  user1Id   Int
  user2     User     @relation("ChatUser2", fields: [user2Id], references: [id])
  user2Id   Int
  createdAt DateTime @default(now())
  messages  Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  content   String   @db.Text
  createdAt DateTime @default(now())
  attachments MessageAttachment[]
}

model MessageAttachment {
  id        Int      @id @default(autoincrement())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId Int
  filePath  String   @db.VarChar(255)
  fileType  AttachmentTypes
  createdAt DateTime @default(now())
}
